// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTcpsyn returns the embedded CollectionSpec for tcpsyn.
func loadTcpsyn() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpsynBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcpsyn: %w", err)
	}

	return spec, err
}

// loadTcpsynObjects loads tcpsyn and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcpsynObjects
//	*tcpsynPrograms
//	*tcpsynMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcpsynObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcpsyn()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcpsynSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpsynSpecs struct {
	tcpsynProgramSpecs
	tcpsynMapSpecs
}

// tcpsynSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpsynProgramSpecs struct {
	XdpSockProg *ebpf.ProgramSpec `ebpf:"xdp_sock_prog"`
}

// tcpsynMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpsynMapSpecs struct {
	QidconfMap *ebpf.MapSpec `ebpf:"qidconf_map"`
	XsksMap    *ebpf.MapSpec `ebpf:"xsks_map"`
}

// tcpsynObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcpsynObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpsynObjects struct {
	tcpsynPrograms
	tcpsynMaps
}

func (o *tcpsynObjects) Close() error {
	return _TcpsynClose(
		&o.tcpsynPrograms,
		&o.tcpsynMaps,
	)
}

// tcpsynMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcpsynObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpsynMaps struct {
	QidconfMap *ebpf.Map `ebpf:"qidconf_map"`
	XsksMap    *ebpf.Map `ebpf:"xsks_map"`
}

func (m *tcpsynMaps) Close() error {
	return _TcpsynClose(
		m.QidconfMap,
		m.XsksMap,
	)
}

// tcpsynPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcpsynObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpsynPrograms struct {
	XdpSockProg *ebpf.Program `ebpf:"xdp_sock_prog"`
}

func (p *tcpsynPrograms) Close() error {
	return _TcpsynClose(
		p.XdpSockProg,
	)
}

func _TcpsynClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpsyn_bpfel.o
var _TcpsynBytes []byte
